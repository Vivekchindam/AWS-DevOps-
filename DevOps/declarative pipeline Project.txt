declarative pipeline project:


Yes, Vivek — the previous Jenkinsfile is a full Declarative Pipeline, not scripted. Here's a clear, minimal setup again focused only on Declarative Pipeline, step-by-step:

✅ 1. Maven Java Project Structure
swift
Copy
Edit
java-maven-hello/
├── Jenkinsfile          ← Declarative pipeline
├── pom.xml              ← Maven project descriptor
└── src
    ├── main/java/com/example/HelloWorld.java
    └── test/java/com/example/HelloWorldTest.java
✅ 2. Jenkinsfile (Declarative Pipeline)
groovy
Copy
Edit
pipeline {
    agent any

    tools {
        maven 'Maven 3.8.6'  // Set this in Jenkins -> Global Tool Configuration
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-username/java-maven-hello.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Archive') {
            steps {
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
    }

    post {
        success {
            echo '✅ Build and test succeeded.'
        }
        failure {
            echo '❌ Build or tests failed.'
        }
    }
}
✅ This is pure declarative syntax (pipeline { ... }), using:

tools to load Maven

agent any for Jenkins agent

post for JUnit results and notifications

✅ 3. pom.xml
xml
Copy
Edit
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>java-maven-hello</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
✅ 4. Java Code (Main + Test)
HelloWorld.java
java
Copy
Edit
package com.example;

public class HelloWorld {
    public String sayHello() {
        return "Hello from Maven!";
    }

    public static void main(String[] args) {
        System.out.println(new HelloWorld().sayHello());
    }
}
HelloWorldTest.java
java
Copy
Edit
package com.example;

import org.junit.Test;
import static org.junit.Assert.*;

public class HelloWorldTest {
    @Test
    public void testSayHello() {
        HelloWorld hw = new HelloWorld();
        assertEquals("Hello from Maven!", hw.sayHello());
    }
}
✅ Next Steps
Push all files to GitHub.

In Jenkins:

Create a Pipeline job.

Set the GitHub repo.

Make sure Maven is configured under Global Tool Configuration.

Run the job. It will compile, test, and package your app, archiving the .jar.